source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
renv::restore()
?renv::restore()
renv::restore(rebuild = TRUE)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
dir <- "./data/"
mo_dir <- mo$new(dir)
print(mo_dir$metadata)
pc_14 <- spatial_container$new(mo_dir$metadata$file_path[1])
pc_14$set_crs(32617)
# path_19 <- "data/TTP_2019_decimate.laz"
pc_19 <- spatial_container$new(mo_dir$metadata$file_path[2])
pc_19$set_crs(32617)
# Source the Python script
icp_module <- paste0(getwd(), "/py/icp_pdal.py")
reticulate::source_python(icp_module)
py_install("pdal")
py_run_string("pip install pdal")
conda_install("pdal")
reticulate::conda_install("pdal")
reticulate::use_virtualenv("fmt_env")
py_install("pdal")
reticulate::conda_create("fmt_env")
reticulate::conda_remove("fmt_env")
reticulate::conda_create("fmt_env", "python = 3.9.13")
reticulate::conda_install("pdal")
py_install("pdal")
reticulate::conda_install("fmt_env", "pdal")
# Source the Python script
icp_module <- paste0(getwd(), "/py/icp_pdal.py")
# Create instance of the ICP class
icp_aligner <- pdal_icp(pc_14$filepath, pc_19$filepath)
reticulate::source_python(icp_module)
import("pdal")
reticulate::conda_activate("fmt_env")
reticulate::use_condaenv("fmt_env")
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
reticulate::use_condaenv("fmt_env")
reticulate::conda_create("fmt_conda", "python = 3.9.13")
reticulate::use_condaenv("fmt_conda")
reticulate::use_condaenv("fmt_conda")
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
reticulate::use_condaenv("fmt_conda")
reticulate::conda_install("fmt_conda", "pdal")
conda_list()
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
reticulate::use_condaenv("fmt_conda")
# Remove the existing Python environment directory
renv::settings$python(NULL)
settings$python
library(reticulate)
renv::use_condaenv("fmt_conda")
library(renv)
renv::use_condaenv("fmt_conda")
renv::settings$python(path = reticulate::conda_python("fmt_conda"))
conda_deactivate()
library(reticulate)
conda_deactivate()
reticulate::conda_deactivate()
reticulate::use_condaenv("fmt_conda")
reticulate::use_condaenv("fmt_conda", required = TRUE)
renv::use_condaenv("fmt_conda")
reticulate::use_condaenv("fmt_conda")
renv_python_conda_select("fmt_renv")
renv::renv_python_conda_select("fmt_renv")
renv_python_conda_select <- function(name, version = NULL) {
# get python package
version <- version %||% Sys.getenv("RENV_CONDA_PYTHON_VERSION", unset = "3.7")
packages <- paste("python", version, sep = "=")
# handle paths (as opposed to environment names)
if (grepl("[/\\\\]", name)) {
if (!file.exists(name))
return(reticulate::conda_create(envname = name, packages = packages))
return(renv_python_exe(name))
}
# check for an existing conda environment
envs <- reticulate::conda_list()
idx <- which(name == envs$name)
if (length(idx))
return(envs$python[[idx]])
# no environment exists; create it
reticulate::conda_create(envname = name, packages = packages)
}
renv_python_conda_select("fmt_renv")
envs <- reticulate::conda_list()
envs$names
envs$name
renv_python_conda_snapshot <- function(project, prompt, python) {
renv_scope_wd(project)
path <- renv_python_conda_export_path(project = project)
# find the root of the associated conda environment
lockfile <- renv_lockfile_load(project = project)
name <- lockfile$Python$Name %||% renv_python_envpath(project, "conda", version)
python <- renv_python_conda_select(name)
info <- renv_python_info(python)
prefix <- info$root
conda <- reticulate::conda_binary()
args <- c(
"env", "export",
"--prefix", renv_shell_path(prefix),
"--file", renv_shell_path(path)
)
output <- if (renv_tests_running()) FALSE else ""
system2(conda, args, stdout = output, stderr = output)
writef("- Wrote Python packages to '%s'.", renv_path_aliased(path))
return(TRUE)
}
renv_scope_wd(project)
renv_scope_wd <- function(dir = getwd(), scope = parent.frame()) {
owd <- setwd(dir)
defer(setwd(owd), scope = scope)
invisible(owd)
}
renv_scope_wd(project)
renv_scope_wd(FMT.Rproj)
getwd()
renv_scope_wd(paste0(getwd(),"/FMT.Rproj"))
renv::restore()
renv::install()
envs
renv::restore()
renv::restore()
renv::activate()
renv::status()
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
#Methods
dir <- "./data/"
mo_dir <- mo$new(dir)
print(mo_dir$metadata)
pc_14 <- spatial_container$new(mo_dir$metadata$file_path[1])
pc_14$set_crs(32617)
# path_19 <- "data/TTP_2019_decimate.laz"
pc_19 <- spatial_container$new(mo_dir$metadata$file_path[2])
pc_19$set_crs(32617)
# Source the Python script
icp_module <- paste0(getwd(), "/py/icp_pdal.py")
# Create instance of the ICP class
icp_aligner <- pdal_icp(pc_14$filepath, pc_19$filepath)
# Call the align method
aligned_file_path <- icp_aligner$align()
reticulate::use_condaenv("fmt_conda", required = TRUE)
reticulate::source_python(icp_module)
reticulate::use_condaenv("fmt_conda", required = TRUE)
# Create instance of the ICP class
icp_aligner <- pdal_icp(pc_14$filepath, pc_19$filepath)
# Call the align method
aligned_file_path <- icp_aligner$align()
pc_14$to_dtm(0.5)
pc_19$to_dtm(0.5)
pc_14$to_chm(0.5)
pc_19$to_chm(0.5)
#This function aligns the two rasters and returns aligned raster objects.
aligned_chm <- process_raster(pc_14$CHM_raw, pc_19$CHM_raw, source_mask = pc_14$mask, target_mask = pc_19$mask, method = "bilinear")
pc_14$save_mask()
pc_14$filepath
getwd()
st_write(pc_14$mask, paste0(getwd(), "/Data/mask_2015.shp"))
st_write(pc_19$mask, paste0(getwd(), "/Data/mask_2019.shp"))
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
set_lidr_threads(10)
dir <- "./data/"
# dir <- "G:/Thesis/Sunnybrook/DataDir/"
mo_dir <- mo$new(dir)
print(mo_dir$metadata)
pc_14 <- spatial_container$new(mo_dir$metadata$file_path[5])
pc_14$set_crs(32617)
# path_19 <- "data/TTP_2019_decimate.laz"
pc_19 <- spatial_container$new(mo_dir$metadata$file_path[6])
pc_19$set_crs(32617)
pc_14$mask <- mask_pc(pc_14$LPC)
pc_19$mask <- mask_pc(pc_19$LPC)
pc_14$to_dtm(1)
pc_19$to_dtm(1)
pc_14$to_chm(1)
pc_19$to_chm(1)
plot(pc_19$CHM)
plot(pc_14$mask)
plot(pc_19$LPC)
ground <- ground_filter(pc_14$LPC)
ground <- filter_ground(pc_14$LPC)
plot(ground)
plot(pc_14$DTM)
plot(pc_14$CHM)
pc_14$to_dtm(1)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
set_lidr_threads(10)
pc_14 <- spatial_container$new(mo_dir$metadata$file_path[5])
dir <- "./data/"
# dir <- "G:/Thesis/Sunnybrook/DataDir/"
mo_dir <- mo$new(dir)
print(mo_dir$metadata)
pc_14 <- spatial_container$new(mo_dir$metadata$file_path[5])
pc_14$set_crs(32617)
# path_19 <- "data/TTP_2019_decimate.laz"
pc_19 <- spatial_container$new(mo_dir$metadata$file_path[6])
pc_19$set_crs(32617)
pc_14$mask <- mask_pc(pc_14$LPC)
pc_19$mask <- mask_pc(pc_19$LPC)
pc_14$to_dtm(1)
plot(pc_14$DTM)
pc_14$to_chm(1)
plot(pc_14$CHM)
lidR::filter_roi
chm <- rasterize_canopy(pc_14$LPC, res = 1, pitfree(max_edge = c(0, 1.5)))
plot(chm, col = col)
plot(chm)
no_buildings <- filter_poi(pc_14$LPC, Classification != 6)
plot(no_buildings)
chm <- rasterize_canopy(no_buildings, res = 0.5, p2r(0.2, na.fill = tin()))
plot(chm)
nlas <- pc_14$LPC - pc_14$DTM
plot(nlas)
nlas <- no_buildings - pc_14$DTM
plot(nlas)
chm <- rasterize_canopy(nlas, res = 0.5, p2r(0.2, na.fill = tin()))
plot(chm)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
set_lidr_threads(10)
mo_dir$metadata$file_path[5]
dir <- "./data/"
mo_dir <- mo$new(dir)
print(mo_dir$metadata)
st_write(pc_14$mask,"C:\\Users\\cscar\\FMT\\data\\SB_Mask15.shp")
st_write(pc_19$mask,"C:\\Users\\cscar\\FMT\\data\\SB_Mask19.shp")
pc_14$to_dtm(1)
plot(pc_14$DTM)
pc_19$to_dtm(1)
pc_14$to_chm(1)
plot(pc_14$CHM)
pc_14$to_dtm(1)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
set_lidr_threads(10)
dir <- "./data/"
# dir <- "G:/Thesis/Sunnybrook/DataDir/"
mo_dir <- mo$new(dir)
print(mo_dir$metadata)
pc_14 <- spatial_container$new(mo_dir$metadata$file_path[4])
pc_14$set_crs(32617)
# path_19 <- "data/TTP_2019_decimate.laz"
pc_19 <- spatial_container$new(mo_dir$metadata$file_path[6])
pc_19$set_crs(32617)
pc_14 <- spatial_container$new(mo_dir$metadata$file_path[5])
pc_14$set_crs(32617)
# path_19 <- "data/TTP_2019_decimate.laz"
pc_19 <- spatial_container$new(mo_dir$metadata$file_path[7])
pc_19$set_crs(32617)
pc_14$mask <- st_read("C:\\Users\\cscar\\FMT\\data\\SB_Mask15.shp")
pc_19$mask <- st_read("C:\\Users\\cscar\\FMT\\data\\SB_Mask19.shp")
pc_14$to_dtm(1)
plot(pc_14$DTM)
# pc_19$to_dtm(1)
pc_14$to_chm(1)
plot(pc_14$CHM)
pc_19$to_dtm(1)
pc_19$to_chm(1)
plot(pc_19$CHM)
#This function aligns the two rasters and returns aligned raster objects.
aligned_chm <- process_raster(pc_14$CHM_raw, pc_19$CHM_raw, source_mask = pc_14$mask, target_mask = pc_19$mask, method = "bilinear")
source <- pc_14$CHM_raw
target <- pc_19$CHM_raw
source_mask <- pc_14$mask
target_mask <- pc_19$mask
aligned <- FALSE
aligned <- terra::compareGeom(source, target, stopOnError = FALSE)
method <- "bilinear"
union <- sf::st_union(source_mask, target_mask)
union <- terra::vect(union)
# source <- transform_raster_crs(source, target, crs)
source <- terra::crop(source, terra::ext(union))
target <- terra::crop(target, terra::ext(union))
source <- terra::resample(source, target, method = method)
# Apply masks to each of the raster layers which will be used for the difference.
source <- terra::mask(source, union)
target <- terra::mask(target, union)
aligned_chm <- process_raster(source = pc_14$CHM_raw, target = pc_19$CHM_raw, source_mask = pc_14$mask, target_mask = pc_19$mask, method = "bilinear")
source_chm <- aligned_chm[[1]]
target_chm <- aligned_chm[[2]]
chm_mask <- aligned_chm[[3]]
chm_diff_test <- diff_classify(source_chm, target_chm)
plot_stats(chm_diff_test)
displayMap(pc_14$DTM,pc_14$CHM, chm_diff_test, chm_mask)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
set_lidr_threads(10)
footprints <- st_read(""C:/Users/cscar/FMT/data/SB_Buildings.shp")
footprints <- sf::st_read("C:/Users/cscar/FMT/data/SB_Buildings.shp")
# Create a new raster with the same extent as SB_Change and 1m resolution
template_raster <- terra::rast(extent = terra::ext(source), resolution = 1)
# Step 3: Rasterize the building polygons onto the new 1m raster grid
buildings_raster <- terra::rasterize(terra::vect(footprints), template_raster, background = NA)
terra::crs(buildings_raster) <- terra::crs(source)
# Step 4: Set the overlapping raster cells in SB_Change to 0 where buildings exist
rv$source_raster[!is.na(buildings_raster)] <- 0
target[!is.na(buildings_raster)] <- 0
# Step 4: Set the overlapping raster cells in SB_Change to 0 where buildings exist
source[!is.na(buildings_raster)] <- 0
# Apply masks to each of the raster layers which will be used for the difference.
source <- terra::mask(source, union)
target <- terra::mask(target, union)
# Create a new raster with the same extent as SB_Change and 1m resolution
template_raster <- terra::rast(extent = terra::ext(source), resolution = 1)
# Step 3: Rasterize the building polygons onto the new 1m raster grid
buildings_raster <- terra::rasterize(terra::vect(footprints), template_raster, background = NA)
terra::crs(buildings_raster) <- terra::crs(source)
# Step 4: Set the overlapping raster cells in SB_Change to 0 where buildings exist
source[!is.na(buildings_raster)] <- 0
target[!is.na(buildings_raster)] <- 0
classified_diff <- diff_classify(source, target)
diff_class <- terra::mask(classified_diff, union)
plot(diff_class)
plot_stats(diff_class)
displayMap(pc_14$DTM, pc_14$CHM, chm_diff_test, chm_mask)
plot(diff_class)
displayMap(pc_14$DTM, pc_14$CHM, diff_class, chm_mask)
# Run this script to start the FMT
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
plot(classified_diff)
raster_values <- terra::values(classified_diff)
# Remove NA values if necessary
raster_values <- raster_values[!is.na(raster_values)]
# Get the count of each class
class_counts <- table(raster_values)
# Calculate the total number of cells
total_cells <- sum(class_counts)
# Calculate the percentage of each class
class_percentages <- (class_counts / total_cells) * 100
plot(class_percentages)
class_percentages
# Get the frequency of each class
class_freq <- freq(classified_diff)
# Calculate the total number of cells
total_cells <- sum(class_freq[, "count"])
# Calculate percentage for each class
class_freq$percentage <- (class_freq$count / total_cells) * 100
# Set the class values as row names
rownames(class_freq) <- class_freq$value
# Remove the 'value' column since it's now the row name
class_freq <- class_freq[, -1]
class_freq
functions::mask_pc()
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
functions::mask_pc()
diff_classify <- function(earlier, later) {
# Compute the difference
diff <- later - earlier
# Create a raster for the magnitude of change
# Classify the differences
m <- c(-Inf, -10, 1,
-10, -0.5, 2,
-0.5, 0.5, 3,
0.5, 10, 4,
10, Inf, 5)
# Create a matrix with the ranges for reclassification
rclmat <- matrix(m, ncol = 3, byrow = TRUE)
diff_class <- terra::classify(diff, rclmat, include.lowest = TRUE)
return(diff_class)
}
# Function to for preprocessing of a raster. It aligns the source to the target, resamples and then masks the output so they have the same extent as the target
process_raster <- function(source, target, source_mask, target_mask,  method = "bilinear") {
# Assuming you have predefined masks for source and target
# source_mask <- transform_polygon_crs(source_mask, target_mask, crs)
union_sf <- sf::st_union(source_mask, target_mask)
union_vect <- terra::vect(union_sf)
# Crop the source to match the target raster's extent.
# source <- transform_raster_crs(source, target, crs)
source <- terra::crop(source, terra::ext(union_vect))
target <- terra::crop(target, terra::ext(union_vect))
source <- terra::resample(source, target, method = method)
# Apply masks to each of the raster layers which will be used for the difference.
source <- terra::mask(source, union_vect)
target <- terra::mask(target, union_vect)
return(list(source = source, target = target, vect_mask = union_vect))
}
source(file.path("./r/meta_obj.R"), local = TRUE)
source(file.path("./r/spatial_container.R"), local = TRUE)
source(file.path("./r/functions.R"), local = TRUE)
# Run this script to start the FMT
source(file.path("./global.R"), local = TRUE)
# Run this script to start the FMT
source(file.path("./global.R"), local = TRUE)
source(file.path("./server.R"), local =  TRUE)
source(file.path("./r/functions.R"), local = TRUE)
source(file.path("./r/spatial_container.R"), local = TRUE)
source(file.path("./r/meta_obj.R"), local = TRUE)
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
