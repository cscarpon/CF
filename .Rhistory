source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
shiny::runApp('fmt')
runApp('fmt')
shiny::runApp('fmt')
runApp('fmt')
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
library(lidR)
las <- readLAS("C:\\Users\\cscar\\FMT\data\\TTP_2015.laz")
las <- readLAS("C:\\Users\\cscar\\FMT\\data\\TTP_2015.laz")
plot(las)
str(las)
unique(las$Classification)
test_ground <-unique(las$Classification)
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
dir <- ("C:\\Users\\cscar\\FMT\\data)
dir <- ("C:\\Users\\cscar\\FMT\\data")
dir_files <- list.files(dir, pattern = ".laz || .las")
dir_files
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
writeLAS(las, "C:\\Users\\cscar\\FMT\\data\\TTP_2015.las")
dir <- ("C:\\Users\\cscar\\FMT\\data")
dir_files <- list.files(dir, pattern = ".laz || .las")
dir_files
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
test_ground
test_ground_extract <- [[test_ground] == 2]
test_ground_extract <- [test_ground] == 2
test_ground_extract <- [test_ground == 2]
renv::status
renv::update()
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
install.packages("opendatatoronto")
library(opendatatoronto)
library(dplyr)
# get package
package <- show_package("3143aae5-4aec-4646-bd3d-add7c639d3cc")
package
install.packages("RInno")
library(RInno)
library(terra)
image <- rast("C:/Users/cscar/Documents/Thesis/TTP_2021_Georeferenced.png")
test <- terra::rectify("C:/Users/cscar/Documents/Thesis/TTP_2021_Georeferenced.png")
test <- terra::rectify(image)
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
install.packages("leaflet.extras")
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
# Load libraries
library(shiny) # builds the apps
library(dplyr) # data manipulation
library(rgl) # used for colour gradients
library(terra) # used for raster processing
library(lidR) # used for lidar processing
library(sf) # used for vector manipulation
library(ggplot2) # used for plotting
library(dplyr) # used for data manipulation
library(scales) # used for percent
library(leaflet) # used for interactive map
library(leaflet.extras) # used for dynamic legends
library(htmlwidgets)
library(reticulate) # python in r
library(gridExtra) # creates the grid index for density
options(shiny.reactlog = TRUE)
options(shiny.maxRequestSize = 1073741824)
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("fmt/global.R")
source("fmt/server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("fmt/ui.R", local = TRUE)$value
server <- source("fmt/server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
renv::snapshot()
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
library(renv)
renv::use_python(python = "C:/Users/cscar/anaconda3/envs/fmt_env")
renv::use_python(python = "C:/Users/cscar/anaconda3/envs/fmt_env/python.exe")
reticulate::use_condaenv("fmt_env", required = TRUE)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Source the Python script
icp_module <- paste0(getwd(), "/py/icp_pdal.py")
reticulate::source_python(icp_module)
renv::restore()
renv::restore()
renv::restore()
lockfile <- renv::lockfile_read("renv.lock")
print(lockfile)
str(lockfile)
lockfilep[1]
lockfile[1]
lockfile[2]
lockfile[3]
lockfile[3][1]
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
renv::restore()
?renv::restore()
renv::restore(rebuild = TRUE)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
# Define the UI and server
ui <- source("ui.R", local = TRUE)$value
server <- source("server.R", local = TRUE)$value
# Run the app
shinyApp(ui = ui, server = server)
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
dir <- "./data/"
mo_dir <- mo$new(dir)
print(mo_dir$metadata)
pc_14 <- spatial_container$new(mo_dir$metadata$file_path[1])
pc_14$set_crs(32617)
# path_19 <- "data/TTP_2019_decimate.laz"
pc_19 <- spatial_container$new(mo_dir$metadata$file_path[2])
pc_19$set_crs(32617)
# Source the Python script
icp_module <- paste0(getwd(), "/py/icp_pdal.py")
reticulate::source_python(icp_module)
py_install("pdal")
py_run_string("pip install pdal")
conda_install("pdal")
reticulate::conda_install("pdal")
reticulate::use_virtualenv("fmt_env")
py_install("pdal")
reticulate::conda_create("fmt_env")
reticulate::conda_remove("fmt_env")
reticulate::conda_create("fmt_env", "python = 3.9.13")
reticulate::conda_install("pdal")
py_install("pdal")
reticulate::conda_install("fmt_env", "pdal")
# Source the Python script
icp_module <- paste0(getwd(), "/py/icp_pdal.py")
# Create instance of the ICP class
icp_aligner <- pdal_icp(pc_14$filepath, pc_19$filepath)
reticulate::source_python(icp_module)
import("pdal")
reticulate::conda_activate("fmt_env")
reticulate::use_condaenv("fmt_env")
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
reticulate::use_condaenv("fmt_env")
reticulate::conda_create("fmt_conda", "python = 3.9.13")
reticulate::use_condaenv("fmt_conda")
reticulate::use_condaenv("fmt_conda")
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
reticulate::use_condaenv("fmt_conda")
reticulate::conda_install("fmt_conda", "pdal")
conda_list()
source("global.R")
source("server.R")
source("r/functions.R")
source("r/spatial_container.R")
source("r/meta_obj.R")
reticulate::use_condaenv("fmt_conda")
# Remove the existing Python environment directory
renv::settings$python(NULL)
settings$python
library(reticulate)
renv::use_condaenv("fmt_conda")
library(renv)
renv::use_condaenv("fmt_conda")
renv::settings$python(path = reticulate::conda_python("fmt_conda"))
conda_deactivate()
library(reticulate)
conda_deactivate()
reticulate::conda_deactivate()
reticulate::use_condaenv("fmt_conda")
reticulate::use_condaenv("fmt_conda", required = TRUE)
renv::use_condaenv("fmt_conda")
reticulate::use_condaenv("fmt_conda")
renv_python_conda_select("fmt_renv")
renv::renv_python_conda_select("fmt_renv")
renv_python_conda_select <- function(name, version = NULL) {
# get python package
version <- version %||% Sys.getenv("RENV_CONDA_PYTHON_VERSION", unset = "3.7")
packages <- paste("python", version, sep = "=")
# handle paths (as opposed to environment names)
if (grepl("[/\\\\]", name)) {
if (!file.exists(name))
return(reticulate::conda_create(envname = name, packages = packages))
return(renv_python_exe(name))
}
# check for an existing conda environment
envs <- reticulate::conda_list()
idx <- which(name == envs$name)
if (length(idx))
return(envs$python[[idx]])
# no environment exists; create it
reticulate::conda_create(envname = name, packages = packages)
}
renv_python_conda_select("fmt_renv")
envs <- reticulate::conda_list()
envs$names
envs$name
renv_python_conda_snapshot <- function(project, prompt, python) {
renv_scope_wd(project)
path <- renv_python_conda_export_path(project = project)
# find the root of the associated conda environment
lockfile <- renv_lockfile_load(project = project)
name <- lockfile$Python$Name %||% renv_python_envpath(project, "conda", version)
python <- renv_python_conda_select(name)
info <- renv_python_info(python)
prefix <- info$root
conda <- reticulate::conda_binary()
args <- c(
"env", "export",
"--prefix", renv_shell_path(prefix),
"--file", renv_shell_path(path)
)
output <- if (renv_tests_running()) FALSE else ""
system2(conda, args, stdout = output, stderr = output)
writef("- Wrote Python packages to '%s'.", renv_path_aliased(path))
return(TRUE)
}
renv_scope_wd(project)
renv_scope_wd <- function(dir = getwd(), scope = parent.frame()) {
owd <- setwd(dir)
defer(setwd(owd), scope = scope)
invisible(owd)
}
renv_scope_wd(project)
renv_scope_wd(FMT.Rproj)
getwd()
renv_scope_wd(paste0(getwd(),"/FMT.Rproj"))
renv::restore()
renv::install()
envs
renv::restore()
renv::restore()
renv::activate()
renv::status()
